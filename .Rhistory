## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(valuematrix,na.rm=TRUE)
seq_along(id)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=length(datacolumnraw)
meanvector=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)
length(id)
lengthvector=vector(length=length(id))
lengthvector=vector(length=length(id))
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=length(datacolumnraw)
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)
##meanvalues
sum(lengthvector)
mean(meanvector,na.rm=TRUE)
2814.782/1.706
2814.782/1.706*3
8+6+5+7+3+9+4+5+2
49/9
49/9+1.5
(49/9+1.5)/2
8+6+5+7+3+9+4+5+2+1+2
52/11
sum(!is.na(datacolumnraw))
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)
129/32.9
374/535.4
441/1042.2
3.920973+0.6985431+0.4231434
ans/3
5.04266/3
meanvector./lengthvector
meanvector/lengthvector
mean(meanvector/lengthvector)
mean(lengthvector/meanvector)
id=23
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)
pollutant="sulfate"
id=1:10
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)*length(id)
##meanvalues
pollutant="nitrate"
id=70:72
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector,na.rm=TRUE)/sum(lengthvector)*length(id)
##meanvalues
(8+6+5+7+3+9+4+5+2)*9+(1+2)*2/(9+2)*2
((8+6+5+7+3+9+4+5+2)*9+(1+2)*2/(9+2))*2
(((8+6+5+7+3+9+4+5+2)*9+(1+2)*2)/(9+2))*2
mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
lengthvector[k]
k=3
lengthvector[k]
mean(datacolumnraw, na.rm=TRUE)*lengthvector[k]
sum(datacolumnraw)
sum(datacolumnraw,na-rm)
sum(datacolumnraw,na.rm)
sum(datacolumnraw,na.rm=TRUE)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
meanvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
meanvector[k]=sum(datacolumnraw,na.rm=TRUE)
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(meanvector)/sum(lengthvector)*length(id)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
datamatrixraw=0
datacolumnraw=0
sumvector=vector(length=length(id))
lengthvector=vector(length=length(id))
k=1
for (i in id){
if (i<10){ leadingzeros="00"
}else if (i<100){ leadingzeros="0"
}else leadingzeros=""
datamatrixraw=read.csv(paste(leadingzeros,i,".csv",sep=""), header = TRUE, sep = ",", dec = ".", fill = TRUE, comment.char = "")
if (pollutant=="sulfate"){   datacolumnraw=datamatrixraw$"sulfate"
}else if (pollutant=="nitrate"){  datacolumnraw=datamatrixraw$"nitrate"
}else print("Wrong String")
lengthvector[k]=sum(!is.na(datacolumnraw))
sumvector[k]=sum(datacolumnraw,na.rm=TRUE)
k=k+1
}
## x ist der Vektor, aus Daten extrahiert!
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
setwd("..")
meanovalueoverall=mean(sumvector)/sum(lengthvector)*length(id)
l=1
l=l+length(datacolumnraw)
l:l+length(datacolumnraw
l:l+length(datacolumnraw)
l:(l+length(datacolumnraw))
x=list(a=1:5,b=rnorm(10))
mean(x)
lapply(x,mean)
str(a)
str(datacolumnraw)
x=matrix(rnorm(200),20,10)
x
apply(x,2,man)
apply(x,2,mean)
apply(x,1,sum)
rnorm(2*2*10)
array(rnorm(40),c(2,2,10))
matrix(rnorm(40),c(2,2,10))
y=matrix(rnorm(40),c(2,2,10))
x=array(rnorm(40),c(2,2,10))
list(rep(1,4),rep(3,2),rep(2,3),rep(1,4))
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4, 4:1
)
mapply(rnorm,1:5,1:5)
str(noise)
mapply(noise,1:5,1:5,2)
noi
noise=function(n,mean,sd){rnorm(n,mean,sd)}
mapply(noise,1:5,1:5,2)
mapply(rnorm,1:5,1:5,2)
mapply(rnorm,1:5,1:5,.:5)
mapply(rnorm,1:5,1:5,1:5)
mapply(rnorm,1:5,1:5,1:5)
mapply(rnorm,1:5,1:5,1:5)
mapply(rnorm,1:5,1:5,1:5)
mapply(rnorm,1:5,1:5,1:5)
mapply(rnorm,1:5,1:5,1:5)
x=c(rnorm(10),runif(10),rnorm(10,1))
x
rnorm(10,1)
?rnorm
?runif
f=gl(3,10)
?gl
x=c(1:5,"a:e","V:Z")
f=gl(3,5)
f
tapply(x,f,mean)
x
x=c(1:5,"a","b","c","d","e","V","W","X","Y","Z")
tapply(x,f,mean)
x=c(1:5,225:229,9:14)
x
x=c(1:5,225:229,9:13)
tapply(x,f,mean)
split(x,f)
y=split(x,f)
y
mean(y,[1])
mean(y[1])
mean(y$1)
mean(y$'1')
tapply(y,f)
tapply(x,f)
tapply(x,f,mean)
library(datasets)
head(airqualiy)
head(airquality)
airquality
s=split(airquality,airquality$Month)
lapply(s,funtcion(x),cplMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x),cplMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x),colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=T))
x=rnorm(10)
f1=gl(5,2)
f2=gl(2,5)
interation(f1,f2)
interaction(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
x
list(f1,f2)
str(split(x,list(f1,f2),drop=T))
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
werte=sapply(split(mtcars$mpg, mtcars$cyl), mean)
werte[1]
werte[1]-werte[3]
iris
sapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, 2, mean)
lapply(iris$Sepal.Length, mean)
iris$Sepal.Length
mean(iris$Sepal.Length)
mtcar
mtcars
tapply(mtcars$mpg, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
werte=tapply(mtcars$hp, mtcars$cyl, mean)
werte[3]-werte[1]
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(iris[, 1:4], 2, mean)
iris
tapply(iris$Species virginica, mean)
tapply(iris$Species, virginica, mean)
tapply(iris$Species, "virginica", mean)
tapply(iris$Sepal.Length, "virginica", mean)
tapply(iris$Sepal.Length, iris$"virginica", mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
subset=split(iris$Species, c("virginica","versicolor","setosa"))
subset
subset=split(iris, c("virginica","versicolor","setosa"))
subset
iris$Sepal.Width[ iris$Species %in% "virginica"]
iris$Sepal.Length[ iris$Species %in% "virginica"]
mean(iris$Sepal.Length[ iris$Species %in% "virginica"])
numeric()
x=numeric()
setwd("C:\\Users\\marti_000\\Documents\\Git\\ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v=1:23
cachemean(v)
v=c(1:23)
cachemean(v)
makeVector(v)
ff=makeVector(v)
ff
ff.set
set(v)
cachemean(ff)
cachemean(ff)
mean(1:23)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ff=makevector(1:45)
ff=makeVector(1:45)
cachemean(ff)
cachemean(ff)
ff
lapply(mtcars function(x) sd(x)/mean(x))
mtcars
lapply(mtcars$disp function(x) sd(x)/mean(x))
lapply(mtcars, function(x), sd(x)/mean(x))
lapply(mtcars, function(x) sd(x)/mean(x))
x=13
get=function() x
get
